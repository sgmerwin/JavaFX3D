package sample;

import javafx.application.Application;
import javafx.beans.property.DoubleProperty;
import javafx.beans.property.SimpleDoubleProperty;
import javafx.event.EventHandler;
import javafx.fxml.FXMLLoader;
import javafx.geometry.HPos;
import javafx.geometry.Insets;
import javafx.geometry.Point3D;
import javafx.geometry.Pos;
import javafx.scene.*;
import javafx.scene.control.Button;
import javafx.scene.control.Hyperlink;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;
import javafx.scene.image.Image;
import javafx.scene.input.KeyEvent;
import javafx.scene.input.MouseButton;
import javafx.scene.input.MouseEvent;
import javafx.scene.input.ScrollEvent;
import javafx.scene.layout.*;
import javafx.scene.paint.*;
import javafx.scene.shape.*;
import javafx.scene.text.Font;
import javafx.scene.text.FontWeight;
import javafx.scene.text.Text;
import javafx.scene.transform.Rotate;
import javafx.scene.transform.Transform;
import javafx.stage.Stage;

import java.awt.geom.Line2D;
import java.util.ArrayList;

public class Main2 extends Application {

    public static final double Width = 300;
    public static final double Height = 300;
    Group group = new Group();
    //Group group2 = new Group();
    GridPane gridPaneTop = new GridPane();
    GridPane gridPaneLeft = new GridPane();
    Camera camera = new PerspectiveCamera();
    Double anchorX, anchorY;
    Double anchorAngleX = 0.0;
    Double anchorAngleY = 0.0;
    final DoubleProperty angleX = new SimpleDoubleProperty(0);
    final DoubleProperty angleY = new SimpleDoubleProperty(0);

    //ArrayList<Cylinder> arrCyl = new ArrayList<>();
    Cylinder[] arrCyl = new Cylinder[100];
    static int cylinderCount = 0;
    Box[] arrBox = new Box[100];
    static int boxCount = 0;
    Sphere[] arrSphere = new Sphere[100];
    static int sphereCount = 0;
    Line[] arrLine = new Line[100];
    static int lineCount = 0;




    public void start(Stage stage){

        stage.setTitle("Testing Layouts");
        BorderPane border = new BorderPane();
        grid(gridPaneTop);
        border.setTop(gridPaneTop);
        border.setLeft(gridPaneLeft);
        border.setCenter(group);
        Scene scene = new Scene(border, Width, Height);
        addUIControlsTOP(gridPaneTop);
        addUIControlsLEFT(gridPaneLeft);
        GenLine(group,0,-500,0,500);
        GenLine(group,-500,0,500,0);
        GenCyl(group,50,50,200,0);
        GenBox(group,50,50,50,0,0);
        GenSphere(group,50,-200,50);
        group.translateXProperty().set(Width/2);
        group.translateYProperty().set(Height/2);
        group.translateZProperty().set(0);
        initMouseControl(group, scene, stage);

        scene.setFill(Color.WHITE);
        scene.setCamera(camera);
        stage.setScene(scene);
        stage.show();

    }//start

    public void GenCyl(Group group, double radius, double height, double x, double y){
        arrCyl[cylinderCount] = new Cylinder();
        arrCyl[cylinderCount].setRadius(radius);
        arrCyl[cylinderCount].setHeight(height);
        arrCyl[cylinderCount].setLayoutX(x);
        arrCyl[cylinderCount].setLayoutY(y);
        group.getChildren().add(arrCyl[cylinderCount]);
        ++cylinderCount;
    }//method

    public void GenBox(Group group, double depth, double width, double height, double x, double y){
        arrBox[boxCount] = new Box();
        arrBox[boxCount].setDepth(depth);
        arrBox[boxCount].setWidth(width);
        arrBox[boxCount].setHeight(height);
        arrBox[boxCount].setLayoutX(x);
        arrBox[boxCount].setLayoutY(y);
        group.getChildren().add(arrBox[boxCount]);
        ++boxCount;

        //PhongMaterial material = new PhongMaterial();
        //material.setDiffuseMap(new Image(getClass().getResourceAsStream("/resources/metal.jpeg")));
        //box.setMaterial(material);
    }//method

    public void GenSphere(Group group, double radius, double x, double y){
        arrSphere[sphereCount] = new Sphere();
        arrSphere[sphereCount].setRadius(radius);
        arrSphere[sphereCount].setLayoutX(x);
        arrSphere[sphereCount].setLayoutY(y);
        group.getChildren().add(arrSphere[sphereCount]);
        ++sphereCount;
    }//method

    public void GenLine(Group group, double x1, double y1, double x2, double y2 ){
        arrLine[lineCount] = new Line(x1,y1,x2,y2);
        group.getChildren().add(arrLine[lineCount]);
        ++lineCount;
    }//method

    public void grid(GridPane gridPane){
        gridPane.setAlignment(Pos.TOP_CENTER);
        gridPane.setPadding(new Insets(40,40,40,40));
        gridPane.setHgap(10);
        gridPane.setVgap(10);
        ColumnConstraints columnOneConstraints = new ColumnConstraints(100, 100, Double.MAX_VALUE);
        columnOneConstraints.setHalignment(HPos.RIGHT);
        ColumnConstraints columnTwoConstraints = new ColumnConstraints(200,200,Double.MAX_VALUE);
        columnTwoConstraints.setHgrow(Priority.ALWAYS);
        gridPane.getColumnConstraints().addAll(columnOneConstraints, columnTwoConstraints);
    }//grid

    public void addUIControlsTOP(GridPane gridPane){
        Label headerLabel = new Label("Top Grid Pane");
        headerLabel.setFont(Font.font("Arial", FontWeight.BOLD, 16));
        gridPane.add(headerLabel, 0,0,2,1);
        GridPane.setHalignment(headerLabel, HPos.CENTER);
        GridPane.setMargin(headerLabel, new Insets(20,0,20,0));

        Label CommandLabel = new Label("Enter Commands ");
        gridPane.add(CommandLabel, 0,1);

        TextField CommandField = new TextField();
        CommandField.setPrefHeight(40);
        gridPane.add(CommandField, 1,1);
    }

    public void addUIControlsLEFT(GridPane gridPane){
        Label headerLabel = new Label("Left Grid Pane");
        headerLabel.setFont(Font.font("Arial", FontWeight.BOLD, 12));
        gridPane.add(headerLabel, 0,0,2,1);
        GridPane.setHalignment(headerLabel, HPos.LEFT);
        GridPane.setMargin(headerLabel, new Insets(20,0,20,0));
    }

    private void initMouseControl (Group group, Scene scene, Stage stage){
        Rotate xRotate;
        Rotate yRotate;
        group.getTransforms().addAll(
                xRotate = new Rotate(0, Rotate.X_AXIS),
                yRotate = new Rotate(0, Rotate.Y_AXIS)
        );
        xRotate.angleProperty().bind(angleX);
        yRotate.angleProperty().bind(angleY);
        scene.setOnMousePressed(event ->{
            if(event.getButton() == MouseButton.PRIMARY) {
                anchorX = event.getSceneX();
                anchorY = event.getSceneY();
                anchorAngleX = angleX.get();
                anchorAngleY = angleY.get();
            }
        });
        scene.setOnMouseDragged((MouseEvent event) -> {
            if(event.getButton() == MouseButton.PRIMARY) {
                angleX.set(anchorAngleX - (anchorY - event.getSceneY()));
                angleY.set(anchorAngleY - (anchorX - event.getSceneX()));
            }
        });
        stage.addEventHandler(ScrollEvent.SCROLL, event -> {double delta = event.getDeltaY();
        group.translateZProperty().set(group.getTranslateZ() + delta);
        });
    }



    public static void main(String[] args) {
        launch(args);
    }
}

